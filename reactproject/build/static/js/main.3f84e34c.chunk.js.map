{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","handleClick","console","log","home","polypaths","src","backend","id","noValidate","autoComplete","TextField","label","variant","Button","onClick","banana","xhr","XMLHttpRequest","route","document","getElementById","value","addEventListener","ReactDOM","render","responseText","open","send","App","exact","path","to","className","Breadcrumbs","aria-label","Link","color","href","component","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,sKCwC3C,SAASC,IACPC,QAAQC,IAAI,WAGd,SAASC,IACP,OACE,oCAGJ,SAASC,IACP,OACE,4BAAQC,IAAI,0BAGhB,SAASC,IACP,OACE,yBAAKC,GAAG,QACN,yCACA,0BAAOC,YAAU,EAACC,aAAa,OACjC,kBAACC,EAAA,EAAD,CAAWH,GAAG,OAAOI,MAAM,OAAOC,QAAQ,YAExC,kBAACC,EAAA,EAAD,CAAQD,QAAQ,YAAYE,QAASC,GAArC,SACA,yBAAKR,GAAG,WAOd,SAASQ,IACPd,QAAQC,IAAI,QACZ,IAAIc,EAAM,IAAIC,eACVC,EAAQC,SAASC,eAAe,QAAQC,MAE5CL,EAAIM,iBAAiB,QAAQ,WAE3BC,IAASC,OACP,4BAAKR,EAAIS,cAAmBN,SAASC,eAAe,aAKxDJ,EAAIU,KAAK,MAAO,yBAAyBR,GAEzCF,EAAIW,OAESC,MAhFf,WACE,OAEE,kBAAC,IAAD,CAAerB,GAAG,KAChB,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUC,GAAG,WAEf,yBAAKC,UAAU,MAAMzB,GAAG,MAEtB,4BAAQyB,UAAU,cAClB,kBAACC,EAAA,EAAD,CAAaC,aAAW,cACxB,kBAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,KAAK,IAAIvB,QAASd,GAAxC,QAGA,kBAACmC,EAAA,EAAD,CAAMC,MAAM,UAAWC,KAAK,aAAavB,QAASd,GAAlD,aAGA,kBAACmC,EAAA,EAAD,CAAMC,MAAM,UAAWC,KAAK,qBAAqBvB,QAASd,GAA1D,UAGA,kBAACmC,EAAA,EAAD,CAAMC,MAAM,UAAWC,KAAK,WAAWvB,QAASd,GAAhD,iBAOA,kBAAC,IAAD,CAAO8B,KAAK,QAAQQ,UAAWnC,IAC7B,kBAAC,IAAD,CAAO2B,KAAK,aAAaQ,UAAWlC,IACpC,kBAAC,IAAD,CAAO0B,KAAK,WAAWQ,UAAWhC,OCvBxBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNpB,IAASC,OACP,kBAAC,IAAMoB,WAAP,KAEE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDwHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.3f84e34c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport { Breadcrumbs, Link, Typography, TextField, Button } from '@material-ui/core';\nimport './App.css';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nfunction App() {\n  return (\n    \n    <BrowserRouter id='b'>\n      <Route exact path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n      <div className=\"App\" id=\"ap\">\n        \n        <header className=\"App-header\">\n        <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link color=\"inherit\" href=\"/\" onClick={handleClick}>\n          Home\n        </Link>\n        <Link color=\"inherit\"  href=\"/polypaths\" onClick={handleClick}>\n          Polypaths\n        </Link>\n        <Link color=\"inherit\"  href=\"https://google.com\" onClick={handleClick}>\n          Google\n        </Link>\n        <Link color=\"inherit\"  href=\"/backend\" onClick={handleClick}>\n          See Backend\n        </Link>\n      </Breadcrumbs>\n      \n    \n        </header>\n        <Route path=\"/home\" component={home} />\n          <Route path=\"/polypaths\" component={polypaths} />\n          <Route path=\"/backend\" component={backend} />\n      </div>\n    </BrowserRouter>\n  );\n}\nfunction handleClick(){\n  console.log(\"poggers\")\n}\n\nfunction home(){\n  return(\n    <h1>Home</h1>\n  )\n}\nfunction polypaths(){\n  return(\n    <iframe src=\"https://polypaths.com\"></iframe>\n  )\n}\nfunction backend(){\n  return(\n    <div id=\"back\">\n      <h1>Hello sir</h1>\n      <form  noValidate autoComplete=\"off\">\n    <TextField id=\"path\" label=\"Path\" variant=\"filled\" />\n    </form>\n      <Button variant=\"contained\" onClick={banana}>Enter</Button>\n      <div id=\"banan\">\n\n      </div>\n    </div>\n  )\n}\n\nfunction banana(){\n  console.log('haha')\n  var xhr = new XMLHttpRequest()\n  var route = document.getElementById('path').value\n  // get a callback when the server responds\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    ReactDOM.render(\n      <h1>{xhr.responseText}</h1>,document.getElementById('banan')\n    )\n  })\n  // open the request with the verb and the url\n  \n  xhr.open('GET', 'http://localhost:4000/'+route)\n  // send the request\n  xhr.send()\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}